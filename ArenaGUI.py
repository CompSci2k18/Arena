from local import *
from tkinter import *


class ArenaGUI(Tk):
    """/*
        Class: ArenaGUI
        Main GUI interface for graphical management of the Arena backend
        server.

        Provides graphical management of the underlying server system, as well
        as a panel for displaying any log messages generated by the system.

        Usage:
            _From command line_
            (start code)
                python3 ArenaGUI.py
            (end code)

            _From python shell_
            (start code)
                root = ArenaGUI()
                root.mainloop()
            (end code)

        Group: Constructors

        Constructor: __init__
        Initialises the main window, and creates the children <Panel>s

        Parameters:
            obj master - The parent of this window. Defaults to None
    */"""
    def __init__(self, master=None):
        # Set up the master window
        super(ArenaGUI, self).__init__(master)
        self.title("Arena Server")
        self.resizable(0, 0)
        self.minsize(width=750, height=650)
        self.protocol("WM_DELETE_WINDOW", self._close)

        # Group: Instance Variables

        """/*
            obj: _logPanel
            Reference to this window's instance of <LogPanel>.

            Used to call methods in the instance
        */"""
        self._logPanel = None

        """/*
            obj: _gameServerPanel
            Reference to this window's instance of <GameServerPanel>.

            Used to call methods in the instance
        */"""
        self._gameServerPanel = None

        self._initialiseLogPanel()
        self._initialiseServerPanel()

    # Group: Private Methods

    """/*
        Function: _initialiseLogPanel
        Initialise an instance of <LogPanel>, save it into <_logPanel>,
        and add it to the main window.
    */"""
    def _initialiseLogPanel(self):
        self._logPanel = LogPanel(self, "Log", 400, 650)
        self._logPanel.pack(side=LEFT, fill=BOTH, expand=1)

    """/*
        Function: _initialiseServerPanel
        Initialise an instance of <GameServerPanel>, save it into
        <_gameServerPanel>, and add it to the main window.
    */"""
    def _initialiseServerPanel(self):
        self._gameServerPanel = GameServerPanel(
            self, "Status Controls", 300,
            650, logMessage=self._logPanel.logMessage)
        self._gameServerPanel.pack(side=LEFT, expand=1, fill=BOTH)

    """/*
        Function: _close
        Handler for the closing of the entire application.

        Ensures that all child <Panel> instances can be closed, then destroys
        the main window.

        If any child cannot be closed, then call <_popup> to inform the user
        of which panel cannot be closed

        Notes:
            This method is automatically called when the main window's "X"
            button is clicked
    */"""
    def _close(self):
        # Attempt to close every panel before closing the main window
        closing = True
        closing = closing and self._gameServerPanel.close()
        if not closing:
            self._popup(self._gameServerPanel.getTitle())
            return
        closing = closing and self._logPanel.close()
        # Close the log panel last
        if not closing:
            self._popup(self._logPanel.getTitle())
            return
        self.destroy()

    """/*
        Function: _popup
        Creates a popup window to display an error message when the main window
        cannot be closed

        Parameters:
            str panel_title - The title of the <Panel> that failed to close

        Example:
            Running the following code:
            (start code)
                # First create the main GUI window
                gui = ArenaGUI()
                gui.mainloop()
                # Now create a popup
                gui._popup('Example')
            (end code)
            Will cause the following popup to appear
            (start diagram)
                +---------------------------------+
                |      Panel failed to close      |
                +---------------------------------+
                | Panel "Example" failed to close |
                |            +-------+            |
                |            | Close |            |
                |            +-------+            |
                +---------------------------------+
            (end diagram)
    */"""
    def _popup(self, panel_title):
        popup = Toplevel(self)
        popup.title('Panel failed to close')

        message = 'Panel "%s" failed to close' % (panel_title)
        Label(popup, text=message).pack(fill=BOTH, expand=1)

        Button(popup, command=popup.destroy, text="Close").pack(
            fill=BOTH, expand=1)


if __name__ == '__main__':
    a = ArenaGUI(None)
    a.mainloop()
